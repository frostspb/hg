# Generated by Django 3.0.5 on 2021-07-11 11:07

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import django_fsm
import model_clone.mixins.clone
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('references', '0001_initial'),
        ('clients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssetsSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=200, verbose_name='Asset Name')),
                ('landing_page', models.FileField(upload_to='', verbose_name='Landing Page')),
                ('velocity_koeff', models.FloatField(default=1.0)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('order', models.IntegerField(null=True, verbose_name='Purchase Order')),
                ('customer_information', models.CharField(blank=True, max_length=250, null=True, verbose_name='Customer information')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Campaign Details')),
                ('guarantees', models.TextField(blank=True, null=True, verbose_name='Campaign Guarantees')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('name', models.CharField(max_length=250, verbose_name='Campaign Name')),
                ('campaign_type', models.CharField(blank=True, max_length=128, null=True, verbose_name='Campaign Type')),
                ('active', models.BooleanField(default=True)),
                ('kind', models.CharField(choices=[('standard', 'Standard'), ('copy', 'Copy'), ('contract', 'Contract')], default='standard', max_length=16)),
                ('start_offset', models.PositiveSmallIntegerField(default=0, verbose_name='Start Date offset in days')),
                ('end_offset', models.PositiveSmallIntegerField(default=0, verbose_name='End Date offset in days')),
                ('audience_targeted', models.IntegerField(default=0, verbose_name='Base Target Audience')),
                ('integration', models.CharField(choices=[('salesforce', 'Salesforce'), ('marketo', 'Marketo'), ('hub_spot', 'HubSpot'), ('integrate', 'Integrate'), ('lolagrove', 'Lolagrove')], default='salesforce', max_length=16)),
                ('pacing', models.CharField(choices=[('even', 'Even'), ('front-load', 'Front-Load')], default='even', max_length=16)),
                ('base_velocity', models.IntegerField(default=0, verbose_name='Base Velocity')),
                ('top_percent', models.FloatField(default=0, verbose_name='Top Leads Percent')),
                ('middle_percent', models.FloatField(default=0, verbose_name='Middle Leads Percent')),
                ('bottom_percent', models.FloatField(default=0, verbose_name='Bottom Leads Percent')),
                ('dashboard_string_count', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('remaining_admin_percent', models.PositiveSmallIntegerField(default=0)),
                ('in_progress_admin_percent', models.PositiveSmallIntegerField(default=0)),
                ('intent_feed_goal_percent', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('intent_feed_done_percent', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('abm_goal_percent', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clients.Client')),
                ('job_titles', models.ManyToManyField(blank=True, null=True, to='references.JobTitles')),
                ('managed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='references.Managers')),
                ('tactics', models.ManyToManyField(blank=True, null=True, to='references.Tactics')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TargetSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('leads_goal', models.PositiveIntegerField(default=0, verbose_name='Leads goal')),
                ('leads_generated', models.PositiveIntegerField(default=0, verbose_name='Leads Generated')),
                ('velocity', models.PositiveSmallIntegerField(default=0, verbose_name='Velocity')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='campaigns.Campaign')),
                ('campaign_pos_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='references.CampaignTypes')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaign',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SuppresionListSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('title', models.CharField(max_length=128)),
                ('accounts_value', models.PositiveSmallIntegerField()),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sups', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SectionSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Section')),
                ('slug', models.SlugField(max_length=64)),
                ('enabled', models.BooleanField(default=True)),
                ('can_enabled', models.BooleanField(default=True)),
                ('delta_ta_sector', models.IntegerField(default=0, verbose_name='% Change of TA by Sector')),
                ('delta_ta_per_row', models.IntegerField(default=0, verbose_name='% Change of TA by Each Line')),
                ('delta_v_sector', models.IntegerField(default=0, verbose_name='Speed Change by Sector')),
                ('delta_v_per_row', models.IntegerField(default=0, verbose_name='Speed Change by Each Line')),
                ('quality_sector', models.IntegerField(blank=True, null=True, verbose_name='Change of Quality by Sector')),
                ('quality_per_row', models.IntegerField(blank=True, null=True, verbose_name='Change of Quality by Each Line')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='campaigns.Campaign')),
            ],
            options={
                'verbose_name': 'Section Settings',
                'verbose_name_plural': 'Section Settings',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RevenueSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Revenue')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revenues', to='campaigns.Campaign')),
                ('revenue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revens', to='references.Revenue', verbose_name='Revenue Title')),
            ],
            options={
                'verbose_name': 'Revenue',
                'verbose_name_plural': 'Revenue',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='NurturingSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=256, verbose_name='Type')),
                ('assets', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaigns.AssetsSection')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nurturings', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LeadCascadeProgramSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=256, verbose_name='Leads Description')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lead_cascades', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='JobTitlesSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('generated', models.PositiveSmallIntegerField(default=0, verbose_name='Leads Generated')),
                ('goal', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='titles', to='campaigns.Campaign')),
                ('job_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='references.JobTitles', verbose_name='Title Captured')),
            ],
            options={
                'verbose_name': 'Job Title',
                'verbose_name_plural': 'Job Titles',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ITCuratedSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('pause', 'Pause'), ('requested', 'Requested')], default='active', max_length=16)),
                ('pos', models.SmallIntegerField(default=0, verbose_name='Position')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itcurateds', to='campaigns.Campaign')),
                ('curated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curateds', to='references.ITCurated')),
            ],
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IntentFeedsSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=200, verbose_name='Intent topic')),
                ('kind', models.CharField(choices=[('INFUSEmedia', 'INFUSEmedia'), ('Bombora', 'Bombora'), ('Aberdeen', 'Aberdeen')], default='INFUSEmedia', max_length=32, verbose_name=' Integration Platform')),
                ('companies_count', models.PositiveSmallIntegerField(default=0, verbose_name='Companies Generated')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intents', to='campaigns.Campaign')),
                ('company', models.ManyToManyField(blank=True, null=True, to='clients.Company', verbose_name='Companies')),
            ],
            options={
                'verbose_name': 'Intent Feed',
                'verbose_name_plural': 'Intent Feeds',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InstallBaseSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=256, verbose_name='Title')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ibs', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IndustriesSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='industries', to='campaigns.Campaign')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='industs', to='references.Industry', verbose_name='Industry')),
            ],
            options={
                'verbose_name': 'Industry',
                'verbose_name_plural': 'Industries',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GeolocationsSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=200, verbose_name='Geolocation title')),
                ('goal_per_geo', models.FloatField(default=0, verbose_name='Goal per Geo')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geolocations', to='campaigns.Campaign')),
                ('geolocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='references.Geolocations')),
            ],
            options={
                'verbose_name': 'Geolocation',
                'verbose_name_plural': 'Geolocations',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FairTradeSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=256, verbose_name='Treat Desctiption')),
                ('value', models.CharField(max_length=256, verbose_name='Value')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fair_trades', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomQuestionsSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('question_txt', models.TextField(blank=True, null=True, verbose_name='Question')),
                ('answer_txt', models.TextField(blank=True, null=True, verbose_name='Answer')),
                ('answer', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='question', chained_model_field='question', on_delete=django.db.models.deletion.CASCADE, to='references.CustomAnswer')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cqs', to='campaigns.Campaign')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='references.CustomQuestion')),
            ],
            options={
                'verbose_name': 'Custom Question',
                'verbose_name_plural': 'Custom Questions',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CreativesSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('subject_line', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Subject Line')),
                ('email_text', models.TextField(blank=True, null=True, verbose_name='Email Text')),
                ('landing_page', models.FileField(blank=True, null=True, upload_to='')),
                ('banners', models.FileField(blank=True, null=True, upload_to='')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creatives', to='campaigns.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CompanySizeSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('name', models.CharField(max_length=256)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='campaigns.Campaign')),
                ('company_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sizes', to='references.CompanySize', verbose_name='Company Size')),
            ],
            options={
                'verbose_name': 'Company Size',
                'verbose_name_plural': 'Companies Sizes',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BANTQuestionsSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_txt', models.TextField(blank=True, null=True, verbose_name='Question')),
                ('answer_txt', models.TextField(blank=True, null=True, verbose_name='Answer')),
                ('answer', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='question', chained_model_field='question', on_delete=django.db.models.deletion.CASCADE, to='references.BANTAnswer')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bants', to='campaigns.Campaign')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='references.BANTQuestion')),
            ],
            options={
                'verbose_name': 'BANT Question',
                'verbose_name_plural': 'BANT Questions',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name='assetssection',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='campaigns.Campaign'),
        ),
        migrations.AddField(
            model_name='assetssection',
            name='titles',
            field=models.ManyToManyField(blank=True, to='references.JobTitles'),
        ),
        migrations.CreateModel(
            name='ABMSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('state', django_fsm.FSMField(choices=[('running', 'running'), ('pause', 'pause')], default='pause', max_length=50, verbose_name='Status')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.IntegerField(default=0)),
                ('percent', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('file', models.FileField(upload_to='', verbose_name='List')),
                ('accounts', models.IntegerField(default=0, verbose_name='Accounts')),
                ('name', models.CharField(max_length=256, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abms', to='campaigns.Campaign')),
            ],
            options={
                'verbose_name': 'ABM',
                'verbose_name_plural': 'ABM',
            },
            bases=(model_clone.mixins.clone.CloneMixin, models.Model),
        ),
    ]
